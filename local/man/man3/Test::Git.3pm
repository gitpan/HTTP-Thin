.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Git 3"
.TH Test::Git 3 "2014-03-08" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Git \- Helper functions for test scripts using Git
.SH "VERSION"
.IX Header "VERSION"
version 1.311
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Test::More;
\&    use Test::Git;
\&    
\&    # check there is a git binary available, or skip all
\&    has_git();
\&    
\&    # check there is a minimum version of git available, or skip all
\&    has_git( \*(Aq1.6.5\*(Aq );
\&    
\&    # check the git we want to test has a minimum version, or skip all
\&    has_git( \*(Aq1.6.5\*(Aq, { git => \*(Aq/path/to/alternative/git\*(Aq } );
\&    
\&    # normal plan
\&    plan tests => 2;
\&    
\&    # create a new, empty repository in a temporary location
\&    # and return a Git::Repository object
\&    my $r = test_repository();
\&    
\&    # clone an existing repository in a temporary location
\&    # and return a Git::Repository object
\&    my $c = test_repository( clone => [ $url ] );
\&
\&    # run some tests on the repository
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Git provides a number of helpful functions when running test
scripts that require the creation and management of a Git repository.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "has_git"
.IX Subsection "has_git"
.Vb 1
\&    has_git( $version, \e%options );
.Ve
.PP
Checks if there is a git binary available, or skips all tests.
.PP
If the optional \f(CW$version\fR argument is provided, also checks if the
available git binary has a version greater or equal to \f(CW$version\fR.
.PP
This function also accepts an option hash of the same kind as those
accepted by Git::Repository and Git::Repository::Command.
.PP
This function must be called before \f(CW\*(C`plan()\*(C'\fR, as it performs a \fBskip_all\fR
if requirements are not met.
.SS "test_repository"
.IX Subsection "test_repository"
.Vb 1
\&    test_repository( %options );
.Ve
.PP
Creates a new empty git repository in a temporary location, and returns
a Git::Repository object pointing to it.
.PP
This function takes options as a hash. Each key will influence a
different part of the creation process.
.PP
The keys are:
.IP "temp" 4
.IX Item "temp"
Array reference containing parameters to File::Temp \f(CW\*(C`tempdir\*(C'\fR function.
.Sp
Default: \f(CW\*(C`<[ CLEANUP =\*(C'\fR 1 ]>>
.IP "init" 4
.IX Item "init"
Array reference containing parameters to \f(CW\*(C`git init\*(C'\fR.
Must not contain the target directory parameter, which is provided
by \f(CW\*(C`test_repository()\*(C'\fR (via File::Temp).
.Sp
Default: \f(CW\*(C`[]\*(C'\fR
.Sp
The \f(CW\*(C`init\*(C'\fR option is only supported with Git versions higher or
equal to 1.6.2.rc0.
.IP "clone" 4
.IX Item "clone"
Array reference containing parameters to \f(CW\*(C`git clone\*(C'\fR.
Must not contain the target directory parameter, which is provided
by \f(CW\*(C`test_repository()\*(C'\fR (via File::Temp).
.Sp
Note that \f(CW\*(C`clone\*(C'\fR and \f(CW\*(C`init\*(C'\fR are mutually exclusive and that
\&\f(CW\*(C`test_repository()\*(C'\fR will croak if both are provided.
This option has no default value, since at least a Git \s-1URL\s0 must be
provided to the \f(CW\*(C`clone\*(C'\fR option.
.Sp
The \f(CW\*(C`clone\*(C'\fR option is only supported with Git versions higher or
equal to 1.6.2.rc0.
.IP "git" 4
.IX Item "git"
Hash reference containing options for Git::Repository.
.Sp
Default: \f(CW\*(C`{}\*(C'\fR
.PP
This call is the equivalent of the default call with no options:
.PP
.Vb 5
\&    test_repository(
\&        temp => [ CLEANUP => 1 ],    # File::Temp::tempdir options
\&        init => [],                  # git init options
\&        git  => {},                  # Git::Repository options
\&    );
.Ve
.PP
To create a \fIbare\fR repository:
.PP
.Vb 1
\&    test_repository( init => [ \*(Aq\-\-bare\*(Aq ] );
.Ve
.PP
To leave the repository in its location after the end of the test:
.PP
.Vb 1
\&    test_repository( temp => [ CLEANUP => 0 ] );
.Ve
.PP
Note that since \f(CW\*(C`test_repository()\*(C'\fR uses \f(CW\*(C`git init\*(C'\fR to create the test
repository, it requires at least Git version \f(CW\*(C`1.5.0.rc1\*(C'\fR.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The \f(CW\*(C`clone\*(C'\fR option and capability of \f(CW\*(C`test_repository()\*(C'\fR owes a lot
to Nathan Nutter (\s-1NNUTTER\s0), who wanted to be able to clone into a test
repository.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Git\-Repository or by email to
bug\-git\-repository@rt.cpan.org.
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHOR"
.IX Header "AUTHOR"
Philippe Bruhat (BooK) <book@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010\-2014 Philippe Bruhat (BooK), all rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
